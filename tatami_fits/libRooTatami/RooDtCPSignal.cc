/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/

// Your description goes here... 

#include "Riostream.h" 

#include "RooDtCPSignal.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h"
#include "RooCategory.h"
#include "RooRealConstant.h"
#include <math.h> 
#include "TMath.h"
#include "RooCustomizer.h"

#include "tatami/tatami.h"


ClassImp(RooDtCPSignal)


RooDtCPSignal::RooDtCPSignal(const char *name, const char *title,
		RooAbsReal& _dt,
		RooAbsReal& _S,
		RooAbsReal& _A,
		RooAbsCategory& _expno,
		RooAbsReal& _costh,
		RooAbsReal& _ecms,
		RooAbsReal& _rec_vtntrk,
		RooAbsReal& _rec_vterr,
		RooAbsReal& _rec_vtchi2,
		RooAbsReal& _rec_vtndf,
		RooAbsReal& _asc_vtntrk,
		RooAbsReal& _asc_vterr,
		RooAbsReal& _asc_vtchi2,
		RooAbsReal& _asc_vtndf,
		RooAbsReal& _keeptagl,
		RooAbsCategory& _flavor,
		RooAbsReal& _wtag,
		RooAbsReal& _delta_wtag,
		double _delta_m,
		double _tau_b,
		bool _mc,
		bool _addoutlier,
		double _alpha) :
		RooAbsPdf(name, title),
		dt("dt", "dt", this, _dt),
		S("S", "S", this, _S),
		A("A", "A", this, _A),
		expno("expno", "expno", this, _expno),
		costh("costh", "costh", this, _costh),
		ecms("ecms", "ecms", this, _ecms),
		rec_vtntrk("rec_vtntrk", "rec_vtntrk", this, _rec_vtntrk),
		rec_vterr("rec_vterr", "rec_vterr", this, _rec_vterr),
		rec_vtchi2("rec_vtchi2", "rec_vtchi2", this, _rec_vtchi2),
		rec_vtndf("rec_vtndf", "rec_vtndf", this, _rec_vtndf),
		asc_vtntrk("asc_vtntrk", "asc_vtntrk", this, _asc_vtntrk),
		asc_vterr("asc_vterr", "asc_vterr", this, _asc_vterr),
		asc_vtchi2("asc_vtchi2", "asc_vtchi2", this, _asc_vtchi2),
		asc_vtndf("asc_vtndf", "asc_vtndf", this, _asc_vtndf),
		keeptagl("keeptagl", "keeptagl", this, _keeptagl),
		flavor_cat("flavor_cat", "flavor", this, _flavor),
		wtag("wtag", "wtag", this, _wtag),
		delta_wtag("delta_wtag", "delta_wtag", this, _delta_wtag),
		delta_m(_delta_m),
		tau_b(_tau_b),
		mc(_mc),
		dt_ll(Belle::dt_resol_global::dt_llmt),
		dt_ul(Belle::dt_resol_global::dt_ulmt),
		addoutlier(_addoutlier),
		alpha(_alpha) {
}

RooDtCPSignal::RooDtCPSignal(const char *name, const char *title,
		RooAbsReal& _dt,
		RooAbsReal& _S,
		RooAbsReal& _A,
		RooAbsCategory& _expno,
		RooAbsReal& _costh,
		RooAbsReal& _ecms,
		RooAbsReal& _rec_vtntrk,
		RooAbsReal& _rec_vterr,
		RooAbsReal& _rec_vtchi2,
		RooAbsReal& _rec_vtndf,
		RooAbsReal& _asc_vtntrk,
		RooAbsReal& _asc_vterr,
		RooAbsReal& _asc_vtchi2,
		RooAbsReal& _asc_vtndf,
		RooAbsReal& _keeptagl,
		RooAbsCategory& _flavor,
		RooAbsReal& _wtag,
		RooAbsReal& _delta_wtag,
		double _delta_m,
		double _tau_b,
		bool _mc,
		double _dt_ll,
		double _dt_ul,
		bool _addoutlier,
		double _alpha) :
		RooAbsPdf(name, title),
		dt("dt", "dt", this, _dt),
		S("S", "S", this, _S),
		A("A", "A", this, _A),
		expno("expno", "expno", this, _expno),
		costh("costh", "costh", this, _costh),
		ecms("ecms", "ecms", this, _ecms),
		rec_vtntrk("rec_vtntrk", "rec_vtntrk", this, _rec_vtntrk),
		rec_vterr("rec_vterr", "rec_vterr", this, _rec_vterr),
		rec_vtchi2("rec_vtchi2", "rec_vtchi2", this, _rec_vtchi2),
		rec_vtndf("rec_vtndf", "rec_vtndf", this, _rec_vtndf),
		asc_vtntrk("asc_vtntrk", "asc_vtntrk", this, _asc_vtntrk),
		asc_vterr("asc_vterr", "asc_vterr", this, _asc_vterr),
		asc_vtchi2("asc_vtchi2", "asc_vtchi2", this, _asc_vtchi2),
		asc_vtndf("asc_vtndf", "asc_vtndf", this, _asc_vtndf),
		keeptagl("keeptagl", "keeptagl", this, _keeptagl),
		flavor_cat("flavor_cat", "flavor", this, _flavor),
		wtag("wtag", "wtag", this, _wtag),
		delta_wtag("delta_wtag", "delta_wtag", this, _delta_wtag),
		delta_m(_delta_m),
		tau_b(_tau_b),
		mc(_mc),
		dt_ll(_dt_ll),
		dt_ul(_dt_ul),
		addoutlier(_addoutlier),
		alpha(_alpha) {
}

RooDtCPSignal::RooDtCPSignal(const RooDtCPSignal& other, const char* name) :
		RooAbsPdf(other, name),
		dt("dt", this, other.dt),
		S("S", this, other.S),
		A("A", this, other.A),
		expno("expno", this, other.expno),
		costh("costh", this, other.costh),
		ecms("ecms", this, other.ecms),
		rec_vtntrk("rec_vtntrk", this, other.rec_vtntrk),
		rec_vterr("rec_vterr", this, other.rec_vterr),
		rec_vtchi2("rec_vtchi2", this, other.rec_vtchi2),
		rec_vtndf("rec_vtndf", this, other.rec_vtndf),
		asc_vtntrk("asc_vtntrk", this, other.asc_vtntrk),
		asc_vterr("asc_vterr", this, other.asc_vterr),
		asc_vtchi2("asc_vtchi2", this, other.asc_vtchi2),
		asc_vtndf("asc_vtndf", this, other.asc_vtndf),
		keeptagl("keeptagl", this, other.keeptagl),
		flavor_cat("flavor_cat", this, other.flavor_cat),
		wtag("wtag", this, other.wtag),
		delta_wtag("delta_wtag", this, other.delta_wtag),
		delta_m(other.delta_m),
		tau_b(other.tau_b),
		mc(other.mc),
		dt_ll(other.dt_ll),
		dt_ul(other.dt_ul),
		addoutlier(other.addoutlier),
		alpha(other.alpha) {
}

Double_t RooDtCPSignal::evaluate() const {
	double a_k, c_k;

	const double amix = flavor_cat * (1 - 2 * wtag);
	const double cexp = 1. - flavor_cat * delta_wtag;
	Belle::CalcAkCk(costh, ecms, &a_k, &c_k, 0);

	Belle::dtres_param_t* dtres_param = Belle::get_dtres_param((int)expno, (int)mc);

        Belle::dtres_param_t* param = Belle::get_dtres_param((int)expno, (int)mc);
        
        //following lines for the calculation of systematic uncertanties due to resolution function
        //if(expno<30){
	  //param->Srec[0] =+7.046620e-01-1.065471e-01;}//+1.714002e-01;}
	  //param->Srec[1] =+2.120840e-01-4.704013e-02;}//+4.347115e-02;}
//param->ftl_rec_mlt[0] =0+0;}
//param->Stl_rec_mlt = 1+0;}//
	  //param->Sasc[1] = +2.366200e-01-5.605924e-02;}//+3.743452e-02;}
	  //param->Sasc[0] = +4.834940e-01-7.318439e-02;}//+2.820590e-01;}

	  //param->Snp_global =+1.057080e+00-1.630550e-01;}//+1.168773e-01;}
	  //param->Smn_rec =  ;}  

//param->Stl_rec= +3.662940e+00+3.616785e+00;}
//param->ftl_rec=+1.110420e-01+1.547901e-02;}
	  //param->Smn_asc= +9.798010e-01-3.636229e-02;}//+2.777485e-01;}  

//param->Stl_asc=  +3.662940e+00+3.616785e+00;}
//param->ftl_asc=+1.110420e-01+1.547901e-02;}
 
	  //param->fd_np_sgl[0][0]= +7.817180e-01-1.081850e-02;}//+1.033570e-02;}

	  //param->fp_np_sgl[0]=+8.186460e-01-1.847270e-02;}//+1.728010e-02;}

	  //param->tau_np_p_sgl[0][0] =+1.847670e+00-8.060650e-02;}//+8.514250e-02;}

	  //param->tau_np_n_sgl[0][0] =+2.041140e+00-2.431610e-01;}//+2.773060e-01; }

	  //param->fd_np_mlt[0][0]=+4.664410e-01-4.109540e-02;}//+4.014220e-02;}

	  //param->fd_np_mlt[0][1]=+6.371510e-01-4.082290e-02;}//+3.985010e-02;}

	  //param->fd_np_st_mlt[0]=+2.706290e-01-7.026490e-02;}//+7.042270e-02;}

	  //param->fd_np_xi_mlt[0]=-2.204070e-01-1.527740e-02;}//+1.581500e-02;}
	  //param->fd_np_stxi_mlt[0]=+2.228050e-01-3.001790e-02;}//+2.917370e-02;}
	  //param->fn_np_mlt[0]=+1.232800e-01-7.267580e-03;}//+7.256960e-03;}
	  //param->tau_np_p_mlt[0][0]=-5.202290e-03-1.535860e-02;}//+1.544320e-02;}
	  //param->tau_np_p_mlt[0][1]=+7.168080e-01-3.861560e-02;}//+3.880040e-02;}
	  //param->tau_np_p_xi_mlt[0]=-2.966400e-02-5.304540e-03;}//+5.370360e-03;}
	  // param->tau_np_p_stxi_mlt[0]=+2.514870e-01-1.437050e-02;}//+1.442400e-02;}
	  //param->tau_np_n_mlt[0][0]=+4.517970e-02-2.683960e-02;}//+2.696420e-02;}
	  //param->tau_np_n_mlt[0][1]= +5.151980e-01-6.260460e-02;}//+6.384480e-02;}
	  //param->tau_np_n_xi_mlt[0]=-7.831950e-02-1.309970e-02;}//+1.321680e-02;}
	  //param->tau_np_n_stxi_mlt[0]=+4.304680e-01-3.318160e-02;}//+3.442280e-02;}
	  //param->sig_ol=+4.369930e+01-4.845010e+00;}//+1.496606e+01;}
	  //param->fol_sgl=+3.700380e-02-1.079975e-02;}//+6.532360e-03;}
	  //param->fol_mul=+1.141840e-04+5.683895e-05;}
        //==================================================================================
        

	double m_L_e =
			Belle::EfRkRdetRnp_fullrec(dt, 0, tau_b, a_k, c_k,
					(int)rec_vtntrk, rec_vterr, rec_vtchi2, (int)rec_vtndf,
					(int)asc_vtntrk, asc_vterr, asc_vtchi2, (int)asc_vtndf,
					(int)keeptagl,
						   dtres_param);//*0.5;
	double m_L_s =
			Belle::AfRkRdetRnp_fullrec(dt, 0, tau_b, delta_m, a_k, c_k,
					(int)rec_vtntrk, rec_vterr, rec_vtchi2, (int)rec_vtndf,
					(int)asc_vtntrk, asc_vterr, asc_vtchi2, (int)asc_vtndf,
					(int)keeptagl,
					dtres_param) * 0.5 / tau_b;

	double m_L_a =
			Belle::MfRkRdetRnp_fullrec(dt, 0, tau_b, delta_m, a_k, c_k,
					(int)rec_vtntrk, rec_vterr, rec_vtchi2, (int)rec_vtndf,
					(int)asc_vtntrk, asc_vterr, asc_vtchi2, (int)asc_vtndf,
					(int)keeptagl,
					dtres_param) * 0.5 / tau_b;

	double m_int_L_e =
			Belle::norm_EfRkRdetRnp_fullrec(dt_ll, dt_ul, 0, tau_b, a_k, c_k,
					(int)rec_vtntrk, rec_vterr, rec_vtchi2, (int)rec_vtndf,
					(int)asc_vtntrk, asc_vterr, asc_vtchi2, (int)asc_vtndf,
					(int)keeptagl,
					dtres_param);

	double pdf_sig = cexp * m_L_e + amix * (S * m_L_s + A * m_L_a);
        //double pdf_sig = m_L_e; //only for lifetime fit

	if (addoutlier)
		return Belle::AddOutlierWithBkg((int)expno,dt, 1,pdf_sig,pdf_sig,(int)rec_vtntrk, (int)asc_vtntrk,dtres_param, m_int_L_e/alpha, m_int_L_e/alpha, dt_ll, dt_ul, alpha, 1);
//
	else
	  return pdf_sig / (2.0*m_int_L_e);
}

Int_t RooDtCPSignal::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* /*rangeName*/) const {
	if (matchArgs(allVars, analVars, dt)) return 1;
	return 0;
}

Double_t RooDtCPSignal::analyticalIntegral(Int_t code, const char* /*rangeName*/) const {
	assert(code == 1);
	return 1;
}
